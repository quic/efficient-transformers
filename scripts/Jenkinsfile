pipeline 
{

    agent
    {
        node 
        {
            label 'qeff_node'
        }
    }
    stages 
    {
        stage('Install QEfficient')
        {
            steps
            {                
                script
                {

                    sh '''
                    . ~/.bashrc
                    docker run --privileged -dit --name ${BRANCH_NAME} -v ./:/efficient-transformers -v  ${HF_PATH}:${DOCKER_HF_PATH} ${DOCKER_LATEST}:master_latest
                    docker exec ${BRANCH_NAME} bash -c "
                    cd /efficient-transformers &&
                    . /opt/qeff-env/bin/activate &&
                    pip install --upgrade pip setuptools &&
                    pip install .[test] --extra-index-url https://download.pytorch.org/whl/cpu &&
                    pip install junitparser pytest-xdist &&
                    rm -rf QEfficient "
                    '''
                }
            }
        }
        stage('Test')
        {
                steps
                {
                    //todo(ochougul): Increase when MQ tests are enabled 
		            timeout(time: 420, unit: 'MINUTES') 
                    {
                    sh '''
                    docker exec ${BRANCH_NAME} bash -c "
                    cd /efficient-transformers &&
                    . /opt/qeff-env/bin/activate &&
                    export TOKENIZERS_PARALLELISM=false &&
                    export PYTHONPATH=. &&
                    export QEFF_HOME=$(pwd) &&
                    pytest tests -m "not cli and not on_qaic" -n auto --junitxml=tests/tests_log1.xml & &&
                    pytest tests -m "not cli and on_qaic" -n 4 --junitxml=tests/tests_log2.xml & &&
                    wait &&
                    pytest tests -m cli --junitxml=tests/tests_log3.xml &&
                    junitparser merge tests/tests_log1.xml tests/tests_log2.xml tests/tests_log3.xml tests/tests_log.xml &&
                    deactivate &&
                    exit" 
                    '''
                }
            }
        }
    }
    post 
    {
         always 
         {
            script
            {
                try 
                {
                    sh '''
                    docker rm -f ${BRANCH_NAME}
                    sudo chown -R ubuntu .
                    '''
                } 
                catch (error) 
                {
                    echo "Failed to delete container ${BRANCH_NAME}: ${error}"
                }
            }
            
            junit testResults: 'tests/tests_log.xml', skipPublishingChecks: true
            echo 'Cleaning Workspace'
            deleteDir()
         }
    }
       
}
