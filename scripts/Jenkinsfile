pipeline {
   agent {
       node {
           label 'qeff_node'
       }
   }
   options {
        disableConcurrentBuilds()
    }

   stages {
       stage('Install QEfficient') {
           steps {
               sh '''
                   . ~/.bashrc
                   sudo docker run --privileged -dit --name ${BUILD_TAG} -v ./:/efficient-transformers -v ${HF_PATH}:${DOCKER_HF_PATH} ${DOCKER_LATEST}:master_latest
                   sudo docker exec ${BUILD_TAG} bash -c "
                   cd /efficient-transformers &&
                   apt update &&
                   apt install -y python3.10-venv &&
                   python3.10 -m venv preflight_qeff &&
                   . preflight_qeff/bin/activate &&
                   pip install --upgrade pip setuptools &&
                   pip install .[test] &&
                   pip install junitparser pytest-xdist &&
                   pip install librosa==0.10.2 soundfile==0.13.1 && #packages needed to load example for whisper testing
                   pip install --extra-index-url https://download.pytorch.org/whl/cpu timm==1.0.14 torchvision==0.19.1+cpu einops==0.8.1 && #packages to load VLMs
                   rm -rf QEfficient"
               '''
           }
       }

       stage('Non CLI Tests') {
           parallel {
               stage('Run Non-CLI Non-QAIC Tests') {
                   steps {
                       timeout(time: 25, unit: 'MINUTES') {
                           sh '''
                           sudo docker exec ${BUILD_TAG} bash -c "
                           cd /efficient-transformers &&
                           . preflight_qeff/bin/activate &&
                           mkdir -p $PWD/Non_cli_qaic &&
                           export TOKENIZERS_PARALLELISM=false &&
                           export QEFF_HOME=$PWD/Non_cli_qaic &&
                           pytest tests -m '(not cli) and (not on_qaic)' --ignore tests/vllm -n auto --junitxml=tests/tests_log1.xml &&
                           junitparser merge tests/tests_log1.xml tests/tests_log.xml &&
                           deactivate"
                           '''
                       }
                   }
               }
               stage('Run Non-CLI QAIC Tests') {
                   steps {
                       timeout(time: 200, unit: 'MINUTES') {
                           sh '''
                           sudo docker exec ${BUILD_TAG} bash -c "
                           cd /efficient-transformers &&
                           . preflight_qeff/bin/activate &&
                           mkdir -p $PWD/Non_qaic &&
                           export TOKENIZERS_PARALLELISM=false &&
                           export QEFF_HOME=$PWD/Non_qaic &&
                           pytest tests -m '(not cli) and (on_qaic) and (not qnn)' --ignore tests/vllm -n 4 --junitxml=tests/tests_log2.xml &&
                           junitparser merge tests/tests_log2.xml tests/tests_log.xml &&
                           deactivate"
                           '''
                       }
                   }
               }
           }
       }
       stage('QAIC MultiModal Tests') {
                   steps {
                       timeout(time: 60, unit: 'MINUTES') {
                           sh '''
                           sudo docker exec ${BUILD_TAG} bash -c "
                           cd /efficient-transformers &&
                           . preflight_qeff/bin/activate &&
                           mkdir -p $PWD/Non_cli_qaic_multimodal &&
                           export TOKENIZERS_PARALLELISM=false &&
                           export QEFF_HOME=$PWD/Non_cli_qaic_multimodal &&
                           pytest tests -m '(not cli) and (on_qaic) and (multimodal) and (not qnn)' --ignore tests/vllm -n 4 --junitxml=tests/tests_log6.xml &&
                           junitparser merge tests/tests_log6.xml tests/tests_log.xml &&
                           deactivate"
                           '''
                       }
                   }
        }
       stage('CLI Tests') {
                   steps {
                       timeout(time: 60, unit: 'MINUTES') {
                           sh '''
                           sudo docker exec ${BUILD_TAG} bash -c "
                    	   source /qnn_sdk/bin/envsetup.sh &&
                      	   source /qnn_sdk/bin/envcheck -c &&
                           cd /efficient-transformers &&
                           . preflight_qeff/bin/activate &&
                           mkdir -p $PWD/cli &&
                           export TOKENIZERS_PARALLELISM=false &&
                           export QEFF_HOME=$PWD/cli &&
                           pytest tests -m '(cli and not qnn)' --ignore tests/vllm --junitxml=tests/tests_log3.xml &&
                           junitparser merge tests/tests_log3.xml tests/tests_log.xml &&
                           deactivate"
                           '''
                       }
                   }
        }
        stage('vLLM Tests') {

                steps
                {
                    build job: 'qefficient_vllm_upstream', 
                    parameters: [string(name: 'NAME', value: "${BUILD_TAG}")],
                    propagate: true,
                    wait: true
                }
        }
        stage('QNN CLI Tests') {
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    sh '''
                    sudo docker exec ${BUILD_TAG} bash -c "
                    source /qnn_sdk/bin/envsetup.sh &&
                    source /qnn_sdk/bin/envcheck -c &&
                    cd /efficient-transformers &&
                    . preflight_qeff/bin/activate &&
                    mkdir -p $PWD/Qnn_cli &&
                    export TOKENIZERS_PARALLELISM=false &&
                    export QEFF_HOME=$PWD/Qnn_cli &&
                    pytest tests -m '(cli and qnn)' --ignore tests/vllm --junitxml=tests/tests_log4.xml &&
                    junitparser merge tests/tests_log4.xml tests/tests_log.xml &&
                    deactivate"
                    '''
                }
            }
        }
        stage('QNN Non-CLI Tests') {
            steps {
                timeout(time: 200, unit: 'MINUTES') {
                    sh '''
                    sudo docker exec ${BUILD_TAG} bash -c "
                    source /qnn_sdk/bin/envsetup.sh &&
                    source /qnn_sdk/bin/envcheck -c &&
                    cd /efficient-transformers &&
                    . preflight_qeff/bin/activate &&
                    mkdir -p $PWD/Qnn_non_cli &&
                    export TOKENIZERS_PARALLELISM=false &&
                    export QEFF_HOME=$PWD/Qnn_non_cli &&
                    pytest tests -m '(not cli) and (qnn) and (on_qaic)' --ignore tests/vllm --junitxml=tests/tests_log5.xml &&
                    junitparser merge tests/tests_log5.xml tests/tests_log.xml &&
                    deactivate"
                    '''
                }
            }
        }
    }

   post {
       always {
           script {
               try {
                   sh '''
                   sudo docker rm -f ${BUILD_TAG}
                   sudo chown -R ubuntu .
                   '''
               } catch (error) {
                   echo "Failed to delete container ${BUILD_TAG}: ${error}"
               }
           }
           junit testResults: 'tests/tests_log.xml'
           echo 'Cleaning Workspace'
           deleteDir()
       }
   }
}
